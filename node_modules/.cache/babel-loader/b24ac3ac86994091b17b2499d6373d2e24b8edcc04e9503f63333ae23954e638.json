{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport useLocalStorage from \"./useLocalStorage\";\nconst useUpdateLocalStorage = key => {\n  _s();\n  // Retrieve and parse data from localStorage at initialization\n  const {\n    prevData\n  } = useLocalStorage(key);\n  const initialData = prevData || [];\n  const [list, setList] = useState(initialData);\n  useEffect(() => {\n    // Update localStorage whenever list changes\n    localStorage.setItem(key, JSON.stringify(list));\n  }, [list, key]);\n  const addItem = item => {\n    setList(prevList => {\n      // Avoid duplicates by checking if the item already exists\n      if (prevList.some(existingItem => existingItem.id === item.id)) {\n        return prevList;\n      }\n      return [...prevList, item];\n    });\n  };\n  return {\n    list,\n    addItem\n  };\n};\n_s(useUpdateLocalStorage, \"99KOzhIG/btGtNOZJryGnCt7lxU=\", false, function () {\n  return [useLocalStorage];\n});\nexport default useUpdateLocalStorage;","map":{"version":3,"names":["useEffect","useState","useLocalStorage","useUpdateLocalStorage","key","_s","prevData","initialData","list","setList","localStorage","setItem","JSON","stringify","addItem","item","prevList","some","existingItem","id"],"sources":["C:/Users/binbin/Documents/GitHub/Recipe-Finder-App/recipe-finder/src/hooks/useUpdateLocalStorage.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { ItemInterface } from \"../pages/Home\";\r\nimport useLocalStorage from \"./useLocalStorage\";\r\n\r\nconst useUpdateLocalStorage = (key: string) => {\r\n    // Retrieve and parse data from localStorage at initialization\r\n    const { prevData } = useLocalStorage(key);\r\n    const initialData = prevData || [];\r\n    \r\n    const [list, setList] = useState<ItemInterface[]>(initialData);\r\n\r\n    useEffect(() => {\r\n        // Update localStorage whenever list changes\r\n        localStorage.setItem(key, JSON.stringify(list));\r\n    }, [list, key]);\r\n\r\n    const addItem = (item: ItemInterface) => {\r\n        setList((prevList) => {\r\n            // Avoid duplicates by checking if the item already exists\r\n            if (prevList.some(existingItem => existingItem.id === item.id)) {\r\n                return prevList;\r\n            }\r\n            return [...prevList, item];\r\n        });\r\n    };\r\n\r\n    return { list, addItem };\r\n};\r\n\r\nexport default useUpdateLocalStorage;\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,OAAOC,eAAe,MAAM,mBAAmB;AAE/C,MAAMC,qBAAqB,GAAIC,GAAW,IAAK;EAAAC,EAAA;EAC3C;EACA,MAAM;IAAEC;EAAS,CAAC,GAAGJ,eAAe,CAACE,GAAG,CAAC;EACzC,MAAMG,WAAW,GAAGD,QAAQ,IAAI,EAAE;EAElC,MAAM,CAACE,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAkBM,WAAW,CAAC;EAE9DP,SAAS,CAAC,MAAM;IACZ;IACAU,YAAY,CAACC,OAAO,CAACP,GAAG,EAAEQ,IAAI,CAACC,SAAS,CAACL,IAAI,CAAC,CAAC;EACnD,CAAC,EAAE,CAACA,IAAI,EAAEJ,GAAG,CAAC,CAAC;EAEf,MAAMU,OAAO,GAAIC,IAAmB,IAAK;IACrCN,OAAO,CAAEO,QAAQ,IAAK;MAClB;MACA,IAAIA,QAAQ,CAACC,IAAI,CAACC,YAAY,IAAIA,YAAY,CAACC,EAAE,KAAKJ,IAAI,CAACI,EAAE,CAAC,EAAE;QAC5D,OAAOH,QAAQ;MACnB;MACA,OAAO,CAAC,GAAGA,QAAQ,EAAED,IAAI,CAAC;IAC9B,CAAC,CAAC;EACN,CAAC;EAED,OAAO;IAAEP,IAAI;IAAEM;EAAQ,CAAC;AAC5B,CAAC;AAACT,EAAA,CAvBIF,qBAAqB;EAAA,QAEFD,eAAe;AAAA;AAuBxC,eAAeC,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}